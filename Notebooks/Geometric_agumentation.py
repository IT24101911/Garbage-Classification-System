# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bNq2XL0eqPSn9df85QScH0yRpp6utaD0
"""



"""
Geometric Augmentation

Geometric augmentation (like rotation, flipping, scaling, cropping, and shifting) is important because it artificially increases the diversity of the training dataset without collecting new images. Real-world images of objects can appear in different orientations, positions, or scales, so using these transformations helps the model learn invariance to such changes.

 Prevents overfitting by exposing the model to more variations.

 Improves generalization so the model performs better on unseen data.

 Simulates real-world conditions where objects may not always appear in the same angle or position.

 In short, geometric augmentation makes the model more robust and reliable.
> Add blockquote

"""

!pip install opendatasets

import opendatasets as od
od.download("https://www.kaggle.com/datasets/zlatan599/garbage-dataset-classification")

import pandas as pd
data = pd.read_csv("/content/garbage-dataset-classification/Garbage_Dataset_Classification/metadata.csv")

data.head()

import matplotlib.pyplot as plt
from PIL import Image
import numpy as np

image_path = "/content/garbage-dataset-classification/Garbage_Dataset_Classification/images/paper/paper_00068.jpg"
img = Image.open(image_path)
img_array = np.array(img)

print(f"Image loaded! Shape: {img_array.shape}")
plt.imshow(img_array)
plt.title("Original Image")
plt.axis('off')
plt.show()

# Horizontal flip
flipped_img = np.fliplr(img_array)

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.imshow(img_array)
plt.title("Original Image")
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(flipped_img)
plt.title("Horizontally Flipped")
plt.axis('off')

plt.tight_layout()
plt.savefig('horizontal_flip_comparison.png', bbox_inches='tight')
plt.show()

# Vertical flip
vertical_flip_img = np.flipud(img_array)

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.imshow(img_array)
plt.title("Original Image")
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(vertical_flip_img)
plt.title("Vertically Flipped")
plt.axis('off')

plt.tight_layout()
plt.savefig('vertical_flip_comparison.png', bbox_inches='tight')
plt.show()

#rotate_90
rotated_90 = np.rot90(img_array)

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.imshow(img_array)
plt.title("Original Image")
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(rotated_90)
plt.title("Rotated 90째")
plt.axis('off')

plt.tight_layout()
plt.savefig('rotation_90_comparison.png', bbox_inches='tight')
plt.show()

print(f"Original shape: {img_array.shape}")
print(f"Rotated shape: {rotated_90.shape}")

# Apply all basic transformations
transformations = {
    'Original': img_array,
    'Horizontal Flip': np.fliplr(img_array),
    'Vertical Flip': np.flipud(img_array),
    'Rotate 90째': np.rot90(img_array),
    'Rotate 180째': np.rot90(img_array, 2),
    'Rotate 270째': np.rot90(img_array, 3)
}

# Create a grid of all transformations
plt.figure(figsize=(15, 8))

for i, (name, transformed_img) in enumerate(transformations.items()):
    plt.subplot(2, 3, i+1)
    plt.imshow(transformed_img)
    plt.title(f"{name}\nShape: {transformed_img.shape}")
    plt.axis('off')

plt.tight_layout()
plt.savefig('all_basic_transformations.png', bbox_inches='tight', dpi=120)
plt.show()